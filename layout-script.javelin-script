// Generated from javelin-layout file
func activate0() {

}

func activateDynamic() {}
func activateGlobal() {

}
func deactivate0() {

}

func deactivateDynamic() {}
func deactivateGlobal() {

}
var postPress;
var postRelease;

func _pressScanCode(scanCode, isModifier) {
  pressScanCode(scanCode);
  if (isModifier) return;

  if (postPress) {
    var localPostPress = postPress;
    postPress = 0;
    localPostPress();
  }
}

func _releaseScanCode(scanCode, isModifier) {
  releaseScanCode(scanCode);
  if (isModifier) return;

  if (postRelease) {
    var localPostRelease = postRelease;
    postRelease = 0;
    localPostRelease();
  }
}

func init() {
  activate0();
}

func onPress0() {
  pressStenoKey(26 /* "#1" */);
}
func onRelease0() {
  releaseStenoKey(26 /* "#1" */);
}

func onPress1() {
  pressStenoKey(2 /* "T-" */);
}
func onRelease1() {
  releaseStenoKey(2 /* "T-" */);
}

func onPress2() {
  pressStenoKey(4 /* "P-" */);
}
func onRelease2() {
  releaseStenoKey(4 /* "P-" */);
}

func onPress3() {
  pressStenoKey(6 /* "H-" */);
}
func onRelease3() {
  releaseStenoKey(6 /* "H-" */);
}

func onPress4() {
  pressStenoKey(10 /* "*1" */);
}
func onRelease4() {
  releaseStenoKey(10 /* "*1" */);
}

func onPress5() {
  pressStenoKey(11 /* "*2" */);
}
func onRelease5() {
  releaseStenoKey(11 /* "*2" */);
}

func onPress6() {
  pressStenoKey(16 /* "-F" */);
}
func onRelease6() {
  releaseStenoKey(16 /* "-F" */);
}

func onPress7() {
  pressStenoKey(18 /* "-P" */);
}
func onRelease7() {
  releaseStenoKey(18 /* "-P" */);
}

func onPress8() {
  pressStenoKey(20 /* "-L" */);
}
func onRelease8() {
  releaseStenoKey(20 /* "-L" */);
}

func onPress9() {
  pressStenoKey(22 /* "-T" */);
}
func onRelease9() {
  releaseStenoKey(22 /* "-T" */);
}

func onPress10() {
  pressStenoKey(24 /* "-D" */);
}
func onRelease10() {
  releaseStenoKey(24 /* "-D" */);
}

func onPress11() {
  pressStenoKey(1 /* "S2" */);
}
func onRelease11() {
  releaseStenoKey(1 /* "S2" */);
}

func onPress12() {
  pressStenoKey(3 /* "K-" */);
}
func onRelease12() {
  releaseStenoKey(3 /* "K-" */);
}

func onPress13() {
  pressStenoKey(5 /* "W-" */);
}
func onRelease13() {
  releaseStenoKey(5 /* "W-" */);
}

func onPress14() {
  pressStenoKey(7 /* "R-" */);
}
func onRelease14() {
  releaseStenoKey(7 /* "R-" */);
}

func onPress15() {
  pressStenoKey(17 /* "-R" */);
}
func onRelease15() {
  releaseStenoKey(17 /* "-R" */);
}

func onPress16() {
  pressStenoKey(19 /* "-B" */);
}
func onRelease16() {
  releaseStenoKey(19 /* "-B" */);
}

func onPress17() {
  pressStenoKey(21 /* "-G" */);
}
func onRelease17() {
  releaseStenoKey(21 /* "-G" */);
}

func onPress18() {
  pressStenoKey(23 /* "-S" */);
}
func onRelease18() {
  releaseStenoKey(23 /* "-S" */);
}

func onPress19() {
  pressStenoKey(25 /* "-Z" */);
}
func onRelease19() {
  releaseStenoKey(25 /* "-Z" */);
}

func onPress20() {
  pressStenoKey(8 /* "A" */);
}
func onRelease20() {
  releaseStenoKey(8 /* "A" */);
}

func onPress21() {
  pressStenoKey(9 /* "O" */);
}
func onRelease21() {
  releaseStenoKey(9 /* "O" */);
}

var tapCount22;
var timer22;
func onPress22() {
  var now = getTime();
  if (now - timer22 >= 250) tapCount22 = 0;
  timer22 = getTime();
  pressStenoKey(27 /* "#2" */);
}
func onRelease22() {
  releaseStenoKey(27 /* "#2" */);
  if (getTime() - timer22 <= 200) {
    tapCount22 = tapCount22 + 1;
    if (tapCount22 == 2) {
      console("set_steno_mode gemini");

      return;
    }
  }
}

var tapCount23;
var timer23;
func onPress23() {
  var now = getTime();
  if (now - timer23 >= 250) tapCount23 = 0;
  timer23 = getTime();
  pressStenoKey(28 /* "#3" */);
}
func onRelease23() {
  releaseStenoKey(28 /* "#3" */);
  if (getTime() - timer23 <= 200) {
    tapCount23 = tapCount23 + 1;
    if (tapCount23 == 2) {
      console("set_steno_mode embedded");

      return;
    }
  }
}

func onPress24() {
  pressStenoKey(14 /* "E" */);
}
func onRelease24() {
  releaseStenoKey(14 /* "E" */);
}

func onPress25() {
  pressStenoKey(15 /* "U" */);
}
func onRelease25() {
  releaseStenoKey(15 /* "U" */);
}

/* we need these so that the firmware compiler believes 
   it's compatible with the starboard we're pretending to be. */
func onPress26() {}
func onRelease26() {}

func onPress27() {}
func onRelease27() {}